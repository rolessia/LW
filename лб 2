import math
import numpy as np
from scipy.misc import derivative

def f(x):
    return 3*pow(x, 4) - 1*pow(x,3) + 10*pow(x, 2) - 5*pow(x,1) - 3

eps=0.0001

def find_segments(): 
    search_range = np.arange(-10, 10, 1)
    
    a = None
    previous_x = None
    current_x = None
    segments = []
    
    for x in search_range:
        x = round(x, 4)
        current_x = f(x)
        if previous_x != None and previous_x * current_x < 0:
            segments.append((a, x))
        previous_x = current_x
        a = x
    
    return segments

segments = find_segments()
for a, b in segments:
    print(f'Found segment: [{a}, {b}]')

    
import numpy as np
def f(x):
    return 3*pow(x, 4) - 1*pow(x, 3) + 10*pow(x, 2) - 5*pow(x, 1) - 3
def rec(a, b, eps):
    while abs(a - b) > eps:
        if f(a) * f((a + b) / 2) < 0:
            b = (a + b) / 2
        else:
            a = (a + b) / 2
    x = (a + b) / 2
    print('x =', round(x, 5), ' - Half division method')
eps = 0.0001
a = -1.
b = 0.
a1 = 0.
b1 = 1. 

print(f'Solution of a nonlinear equation on a segment [{a}, {b}]')
rec(a, b, eps)
print(f'Solution of a nonlinear equation on a segment [{a1}, {b1}]')
rec(a1, b1, eps)
    
import numpy as np
def f(x):
    return 3*pow(x, 4) - 1*pow(x, 3) + 10*pow(x, 2) - 5*pow(x, 1) - 3
def f_derivative(x):
    return 12*pow(x, 3) - 3*pow(x, 2) + 20*x - 5
def hord(a, b, eps):
    if f(a) * f_derivative(a) > 0:
        x0 = a
        xi = b
    else:
        x0 = b
        xi = a
    
    xi_1 = xi - (xi - x0) * f(xi) / (f(xi) - f(x0))
    while abs(xi_1 - xi) > eps:
        xi = xi_1
        xi_1 = xi - (xi - x0) * f(xi) / (f(xi) - f(x0))
    
    print('x =', round(xi_1, 5), ' - Chord method')
    return xi_1
eps = 0.0001
a = -1.
b = 0.
a1 = 0.
b1 = 1.   
print(f'Solution of a nonlinear equation on segment [{a}, {b}]')
hord(a, b, eps)
print(f'Solution of a nonlinear equation on segment [{a1}, {b1}]')
hord(a1, b1, eps)
